#!/usr/bin/env node

/*
 * Copyright 2010-2020 Gildas Lormeau
 * contact : gildas.lormeau <at> gmail.com
 *
 * This file is part of SingleFile.
 *
 *   The code in this file is free software: you can redistribute it and/or
 *   modify it under the terms of the GNU Affero General Public License
 *   (GNU AGPL) as published by the Free Software Foundation, either version 3
 *   of the License, or (at your option) any later version.
 *
 *   The code in this file is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 *   General Public License for more details.
 *
 *   As additional permission under GNU AGPL version 3 section 7, you may
 *   distribute UNMODIFIED VERSIONS OF THIS file without the copy of the GNU
 *   AGPL normally required by section 4, provided you include this license
 *   notice and a URL through which recipients can access the Corresponding
 *   Source.
 */

/* global require */

const fs = require("fs");
const api = require("./single-file-cli-api");
const express = require("express");
const { Readability } = require("@mozilla/readability");
const { JSDOM } = require("jsdom");

const CONFIGURABLE_OPTION_NAMES = {
  browserLoadMaxTime: Number,
  browserWaitUntil: String,
  browserWaitUntilFallback: Boolean,
};
run(require("./args")).catch((error) => console.error(error.message || error)); // eslint-disable-line no-console

class InputError extends Error {
  constructor(message) {
    super(message);
    this.name = "InputError";
  }
}

async function run(options) {
  if (options.browserCookiesFile) {
    const cookiesContent = fs
      .readFileSync(options.browserCookiesFile)
      .toString();
    try {
      options.browserCookies = JSON.parse(cookiesContent);
    } catch (error) {
      options.browserCookies = parseCookies(cookiesContent);
    }
  }

  const app = express();

  app.get("/read", async function (req, res) {
    let optionInQuery = {};
    for (const prop in CONFIGURABLE_OPTION_NAMES) {
      if (!req.query[prop]) {
        continue;
      }

      try {
        optionInQuery[prop] = CONFIGURABLE_OPTION_NAMES[prop](req.query[prop]);
        console.log(`use option ${prop} in query ${optionInQuery[prop]}`);
      } catch (e) {
        console.error(`invalid option ${prop} in query`);
      }
    }

    let opt = Object.assign({}, options, optionInQuery);
    opt.retrieveLinks = true;
    const url = req.query.url;
    let sf;
    try {
      sf = await api.initialize(opt);
      let pageContent = await capture(sf, url, opt);
      let doc = new JSDOM(pageContent, { url: url });
      let reader = new Readability(doc.window.document);
      let article = reader.parse();
      res.send(article.content);
    } catch (e) {
      if (e instanceof InputError) {
        res.status(400).send(e.message);
      } else {
        res.status(500).send(`capture error: ${e}`);
      }
    } finally {
      if (sf) {
        await sf.close();
        console.log("browser closed");
      }
    }
  });

  app.get("/", async function (req, res) {
    let optionInQuery = {};
    for (const prop in CONFIGURABLE_OPTION_NAMES) {
      if (!req.query[prop]) {
        continue;
      }

      try {
        optionInQuery[prop] = CONFIGURABLE_OPTION_NAMES[prop](req.query[prop]);
        console.log(`use option ${prop} in query ${optionInQuery[prop]}`);
      } catch (e) {
        console.error(`invalid option ${prop} in query`);
      }
    }

    let opt = Object.assign({}, options, optionInQuery);
    opt.retrieveLinks = true;
    const url = req.query.url;
    let sf;
    try {
      sf = await api.initialize(opt);
      let pageContent = await capture(sf, url, opt);
      res.send(pageContent);
    } catch (e) {
      if (e instanceof InputError) {
        res.status(400).send(e.message);
      } else {
        res.status(500).send(`capture error: ${e}`);
      }
    } finally {
      if (sf) {
        await sf.close();
        console.log("browser closed");
      }
    }
  });

  app.listen(options.httpPort, () => {
    console.log(`listen on ${options.httpPort} ok...`);
  });
}

async function capture(sf, url, options) {
  if (!url) {
    throw new InputError("url not provided");
  }
  if (!api.VALID_URL_TEST.test(url)) {
    throw new InputError("invalid url");
  }
  options.retrieveLinks = true;
  return await sf.capture(url);
}

async function capture_document(sf, url, options) {
  if (!url) {
    throw new InputError("url not provided");
  }
  if (!api.VALID_URL_TEST.test(url)) {
    throw new InputError("invalid url");
  }
  options.retrieveLinks = true;
  return await sf.capture_document(url);
}

function parseCookies(textValue) {
  const httpOnlyRegExp = /^#HttpOnly_(.*)/;
  return textValue
    .split(/\r\n|\n/)
    .filter(
      (line) => line.trim() && (!/^#/.test(line) || httpOnlyRegExp.test(line))
    )
    .map((line) => {
      const httpOnly = httpOnlyRegExp.test(line);
      if (httpOnly) {
        line = line.replace(httpOnlyRegExp, "$1");
      }
      const values = line.split(/\t/);
      if (values.length == 7) {
        return {
          domain: values[0],
          path: values[2],
          secure: values[3] == "TRUE",
          expires: (values[4] && Number(values[4])) || undefined,
          name: values[5],
          value: values[6],
          httpOnly,
        };
      }
    })
    .filter((cookieData) => cookieData);
}
